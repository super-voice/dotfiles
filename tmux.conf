# Use C-a
set-option -g prefix C-a
bind a send-prefix
unbind C-b

# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)'
run-shell 'test "$(tmux -V | cut -c 6-)" = "master" && tmux setenv -g TMUX_VERSION 2.5 || :'

# status bar
# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"

# set pbcopyer and pbpaster
run-shell 'test "$(uname -s)" = Darwin && \
           tmux setenv -g TMUX_PBCOPY "reattach-to-user-namespace pbcopy" && \
           tmux setenv -g TMUX_PBPASTE "reattach-to-user-namespace pbpaste" || :'
run-shell 'test "$(uname -s)" = Linux && [ ! -z $DISPLAY ] && \
           tmux setenv -g TMUX_PBCOPY "xsel -ib" && \
           tmux setenv -g TMUX_PBPASTE "xsel -ob" || :'
run-shell 'test "$(uname -s)" = "MINGW64_NT-10.0" && \
           tmux setenv -g TMUX_PBCOPY "clip" || :'
# TODO support msys

# Based on @ericx's answer and @thiagowfx's answer I put the following together which covers the listed incompatibilties from version 2.0 onwards:

set -g default-terminal "screen-256color"

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# auto window rename
setw -g automatic-rename

set -g status on
set -g status-interval 1
set -g status-justify left
set -g status-left-length 60
set -g status-right-length 120
set -g status-left "#[fg=colour234,bg=colour186,bold] #(uname -m) #[fg=colour186,bg=colour234,nobold,nounderscore,noitalics] #(python ~/dotfiles/tmux-status.py uname) #(python ~/dotfiles/tmux-status.py cpu) #(python ~/dotfiles/tmux-status.py vm)"

set -g status-right "#[fg=colour186,nobold,nounderscore,noitalics]%m-%d %H:%M:%S #[fg=colour234,bg=colour186] #(python ~/dotfiles/tmux-status.py battery) "

# default statusbar colors
set -g status-bg "colour234"
set -g status-attr "none"
set -g status-right-attr "none"
set -g status-left-attr "none"

set -g message-fg "colour186"
set -g message-bg "colour234"
set -g message-command-fg "colour186"
set -g message-command-bg "colour234"

# default window title colors
setw -g window-status-fg "colour188"
setw -g window-status-bg "colour234"
setw -g window-status-attr "none"
setw -g window-status-separator ""
setw -g window-status-format "#[fg=colour188,bg=colour234,nobold,nounderscore,noitalics] #I #W "

# active window title colors
setw -g window-status-current-fg "colour140"
setw -g window-status-current-bg "colour234"
setw -g window-status-current-attr bright
setw -g window-status-current-format "#[fg=colour140,bg=colour234,nobold,nounderscore,noitalics]-> #I #W <-"

# Highlight active window
setw -g window-status-activity-bg "colour234"
setw -g window-status-activity-attr "none"
setw -g window-status-activity-fg "colour186"

# Highlight active pane
set -g pane-active-border-fg "colour186"
set -g pane-border-fg "colour240"

# Allows for faster key repetition
set -sg escape-time 10
set -g base-index 1
setw -g pane-base-index 1

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Mouse
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' \
  "set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on"

# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
  "set -g mouse on"

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h
unbind '"'
unbind %

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 5
bind > resize-pane -R 5
bind - resize-pane -D 5
bind + resize-pane -U 5

#  below line requires tmux 1.9
set -g default-command "bash"
if-shell 'test "$(uname -s)" = Darwin' 'set -g default-command "reattach-to-user-namespace -l bash"'

# Vi copypaste mode
setw -g mode-keys vi

## Bind vi-like copy
unbind p
bind p paste-buffer
bind Escape copy-mode
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  'bind -t vi-copy 'v' begin-selection; \
   bind -t vi-copy 'Escape' cancel; \
   bind -t vi-copy 'Space' halfpage-down; \
   bind -t vi-copy 'Bspace' halfpage-up; \
  '  \
  'bind-key -T copy-mode-vi 'v' send -X begin-selection; \
   bind-key -T copy-mode-vi Escape send -X cancel; \
   bind-key -T copy-mode-vi Space send -X halfpage-down; \
   bind-key -T copy-mode-vi Bspace send -X halfpage-up; \
  '

# Update default binding of `Enter` to also use copy-pipe

if-shell -b '[ ! -z $TMUX_PBCOPY ] && [ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  'bind -t vi-copy 'y' copy-pipe "$TMUX_PBCOPY"; \
   unbind -t vi-copy Enter; \
   bind -t vi-copy Enter copy-pipe "$TMUX_PBCOPY"; \
  '

if-shell -b '[ ! -z $TMUX_PBCOPY ] && [ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  'bind-key -T copy-mode-vi 'y' send -X copy-pipe "$TMUX_PBCOPY"; \
   unbind -T copy-mode-vi Enter; \
   bind-key -t copy-mode-vi Enter send -X copy-pipe "$TMUX_PBCOPY"; \
  '

if-shell -b '[ -z $TMUX_PBCOPY ] && [ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
  'bind -t vi-copy 'y' copy-selection;'

if-shell -b '[ -z $TMUX_PBCOPY ] && [ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  'bind-key -T copy-mode-vi 'y' send -X copy-selection;'

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

# Generic Copy and Paste
if-shell -b '[ ! -z $TMUX_PBCOPY ]' \
   'bind C-c run "tmux save-buffer - | $TMUX_PBCOPY"'
if-shell -b '[ ! -z $TMUX_PBPASTE ]' \
   'bind C-v run "tmux set-buffer \"$($TMUX_PBPASTE)\"; tmux paste-buffer"'
