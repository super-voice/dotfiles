# status bar
set-option -g status-utf8 on

set -g status on
set -g status-interval 1
set -g status-justify left
set -g status-left-length 60
set -g status-right-length 120
set -g status-left ''
set -g status-right ''
set -g status-left "#[fg=colour233,bg=colour186,bold] #S #[fg=colour186,bg=colour234,nobold,nounderscore,noitalics] #(uname -s) #(uname -r | cut -c 1-6)"
set -g status-right "#[fg=colour240,bg=colour234,nobold,nounderscore,noitalics]#[fg=colour231,bg=colour240] #(uptime | cut -f 4-5 -d ' ' | cut -f 1 -d ',') #[fg=colour186,bg=colour240,nobold,nounderscore,noitalics]#[fg=colour233,bg=colour186] %Y-%m-%d %H:%M "

# default statusbar colors
set -g status-bg "colour234"
set -g status-attr "none"
set -g status-right-attr "none"
set -g status-left-attr "none"

set -g message-fg "colour231"
set -g message-bg "colour240"
set -g message-command-fg "colour231"
set -g message-command-bg "colour240"

# default window title colors
setw -g window-status-fg "colour188"
setw -g window-status-bg "colour234"
setw -g window-status-attr "none"
setw -g window-status-separator ""

# active window title colors
setw -g window-status-current-fg white
setw -g window-status-current-bg default
setw -g window-status-current-attr bright
setw -g window-status-current-format "#[fg=colour234,bg=colour240,nobold,nounderscore,noitalics]#[fg=colour231,bg=colour240] #I #[fg=colour231,bg=colour240] #W #[fg=colour240,bg=colour234,nobold,nounderscore,noitalics]"
setw -g window-status-format "#[fg=colour188,bg=colour234] #I #[fg=colour188,bg=colour234] #W "

# Highlight active window
setw -g window-status-activity-bg "colour234"
setw -g window-status-activity-attr "none"
setw -g window-status-activity-fg "colour186"

# Highlight active pane
set -g pane-active-border-fg "colour186"
set -g pane-border-fg "colour240"

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-a
bind-key C-a last-window

# Start numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# This allows using the mouse to resize panes; note that there is no change in
# mouse cursor when hover over a pane divider as one might expect (everything
# still works though).
set -g mouse-resize-pane on

# Allows us to use C-a a <command> to send commands to a TMUX session inside
# another TMUX session
bind-key a send-prefix

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# auto window rename
setw -g automatic-rename

set -g mode-mouse on

# color
set -g default-terminal "screen-256color"

# | and _ are now used for splitting windows into panes
unbind %
bind | split-window -h
bind _ split-window -v

#  below line requires tmux 1.9
set-option -g default-command "bash"
if-shell 'test "$(uname -s)" = Darwin' 'set-option -g default-command "reattach-to-user-namespace -l bash"'

# Vi copypaste mode
setw -g mode-keys vi
#bind-key -t vi-copy 'v' begin-selection
#bind-key -t vi-copy 'y' copy-selection

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
bind-key C-c run-shell -b 'tmux save-buffer - | reattach-to-user-namespace pbcopy'
bind-key C-v run-shell -b 'reattach-to-user-namespace pbpaste | tmux load-buffer - \; paste-buffer -d'

# could be enable for iTerm (Terminal.app doesn't have mouse support)
# but it is t00000000000000000oo slow
set -g mouse-select-pane off

